{"version":3,"sources":["components/CrimeMap.js","actions/crimeDataAction.js","components/Home.js","App.js","serviceWorker.js","reducers/rootReducer.js","reducers/crimeDataReducer.js","index.js"],"names":["Geocode","setApiKey","setLanguage","Marker","text","style","color","background","padding","display","textAlign","alignItems","justifyContent","borderRadius","transform","border","CrimeMap","props","displayMarkers","state","stores","map","store","index","lat","latitude","lng","longitude","testStore","loading","crimeStore","push","crimeData","crime","crimeTitle","Number","split","this","setState","console","log","height","width","bootstrapURLKeys","key","defaultCenter","center","defaultZoom","zoom","Component","defaultProps","connect","dispatch","bindActionCreators","crimeDataAction","response","type","payload","Home","React","App","path","component","test","Boolean","window","location","hostname","match","combineReducers","action","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d28dcd3a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\n\n// Crime data\nimport crimeData from \"../api/crimeData.json\";\nimport Geocode from \"react-geocode\";\n\n//Redux\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nGeocode.setApiKey(\"AIzaSyAu1YfYc6mPuMlmjgP17cxFh-Un4td5vgQ\");\n\n// set response language. Defaults to english.\nGeocode.setLanguage(\"en\");\n\nconst Marker = ({ text }) => (\n  <div\n    style={{\n      color: \"white\",\n      background: \"grey\",\n      padding: \"15px 10px\",\n      display: \"inline-flex\",\n      textAlign: \"center\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      borderRadius: \"100%\",\n      transform: \"translate(-50%, -50%)\",\n      border: \"1px solid red\",\n    }}\n  >\n    {text}\n  </div>\n);\n\nclass CrimeMap extends Component {\n  static defaultProps = {\n    center: {\n      lat: 39.958715,\n      lng: -75.188492,\n    },\n    zoom: 15,\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      stores: [\n        { lat: 47.49855629475769, lng: -122.14184416996333 },\n        { latitude: 47.359423, longitude: -122.021071 },\n      ],\n      testStore: [],\n      loading: true,\n    };\n  }\n\n  displayMarkers = () => {\n    // debugger\n    return this.state.stores.map((store, index) => {\n      return (\n        <Marker\n          lat={store.latitude}\n          lng={store.longitude}\n          text=\"Crime Marker\"\n        />\n      );\n    });\n  };\n\n  async componentDidMount() {\n    var crimeStore = [];\n    crimeStore.push({ lat: 39.958715, lng: -75.188492 });\n    crimeData.map((crime, store) => {\n      var crimeData = {\n        crimeTitle: crime[\"Incident/Offenses:\"],\n        latitude: Number(crime[\"General Location\"].split(\",\")[0]),\n        longitude: Number(crime[\"General Location\"].split(\",\")[1]),\n      };\n      crimeStore.push(crimeData);\n    });\n\n    await this.setState({ loading: false, stores: crimeStore });\n\n    console.log(crimeStore);\n  }\n\n  // async componentDidMount() {\n  //   await this.setState({ stores: this.state.stores.pop(0) });\n  // }\n\n  render() {\n    return (\n      <div style={{ height: \"100vh\", width: \"100%\" }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: \"AIzaSyAu1YfYc6mPuMlmjgP17cxFh-Un4td5vgQ\" }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n        >\n          {this.displayMarkers()}\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { crimeData } = state;\n  return { crimeData };\n};\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      // Actions go here\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CrimeMap);\n","export const crimeDataAction = response => ({\n  type: \"CRIME_DATA\",\n  payload: response\n});\n","import React from \"react\";\nimport CrimeMap from \"./CrimeMap\";\nimport { crimeDataAction } from \"../actions/crimeDataAction\";\n\n//Redux\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  async componentDidMount() {    \n  }\n\n  render() {\n    return (\n      <div>\n        <h1> Crime Log Home Page</h1>\n        <CrimeMap crimeData={this.props.crimeData}/>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { crimeData } = state;\n  return { crimeData };\n};\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      // Actions go here\n      crimeDataAction,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\n\n// Redux Setup\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\n// Page Components\nimport Home from \"./components/Home\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <HashRouter>\n        <Route path=\"/\" component={Home} />\n      </HashRouter>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { test } = state;\n  return { test };\n};\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      // Actions go here\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport crimeDataReducer from \"./crimeDataReducer\";\n\nexport default combineReducers({\n    crimeData: crimeDataReducer\n});\n","export default (state = {}, action) => {\n  switch (action.type) {\n    case \"CRIME_DATA\":\n      return {\n        ...state,\n        crimeData: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Redux setup\nimport rootReducer from \"./reducers/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}